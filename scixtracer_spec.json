{
    "classes":[
        {
            "name": "SxObject",
            "description": "Mother class for each class of the API",
            "getters":[
                {
                    "method": "get_object_name()",
                    "description": "Get the name of the object",
                    "return": {"type": "string", "description": "Name of the object"}
                }
            ],
            "setters": [
                {
                    "method": "set_object_name(name)",
                    "description": "Set the name of the object",
                    "inputs": [{"name": "name", "type": "string", "description": "Name of the object"}]
                }
            ]
        },
        {
            "name": "SxLog",
            "extends": "SxObject",
            "description": "Abstract class for logger. Logger here mention tools to print error and progress in console or GUI",
            "methods":[
                {
                    "name": "notify(status, message)",
                    "description": "Virtual method to implement the log notification",
                    "inputs": [
                        {"name": "status", "type": "string", "description": "Notification status: [default, highlight, header, warning, error]"},
                        {"name": "message", "type": "string", "description": "Content of the notification"}
                    ],
                    "return": {"type": "int", "description": "0 if ok, or 1 if an error occured"} 
                },
                {
                    "name": "progress(percentage)",
                    "description": "Virtual method to implement the log progress",
                    "inputs": [
                        {"name": "purcentage", "type": "int", "description": "Progress percentage in [0, 100]"}
                    ],
                    "return": {"type": "int", "description": "0 if ok, or 1 if an error occured"} 
                }
            ] 
        },
        {
            "name": "SLogTerminal",
            "extends": "SLog",
            "description": "Implementation of SLog to print log in a terminal",
            "methods":[
                {
                    "name": "notify(status, message)",
                    "description": "Print the notification in the terminal",
                    "inputs": [
                        {"name": "status", "type": "string", "description": "Notification status: [default, highlight, header, warning, error]"},
                        {"name": "message", "type": "string", "description": "Content of the notification"}
                    ],
                    "return": {"type": "int", "description": "0 if ok, or 1 if an error occured"} 
                },
                {
                    "name": "progress(percentage)",
                    "description": "Print a progress in the terminal",
                    "inputs": [
                        {"name": "purcentage", "type": "int", "description": "Progress percentage in [0, 100]"}
                    ],
                    "return": {"type": "int", "description": "0 if ok, or 1 if an error occured"} 
                }
            ] 
        },
        {
            "name": "SLogFile",
            "extends": "SLog",
            "description": "Implementation of SLog to print log in a txt log file",
            "methods":[
                {
                    "name": "open_file(file)",
                    "description": "Open the log file",
                    "inputs":[
                        {"name": "file", "type": "string", "description": "Path of the log file"}
                    ],
                    "return": {"type": "int", "description": "0 if ok, or 1 if an error occured"} 
                },
                {
                    "name": "close_file()",
                    "description": "Close the log file",
                    "return": {"type": "int", "description": "0 if ok, or 1 if an error occured"} 
                },
                {
                    "name": "notify(status, message)",
                    "description": "Append the notification in a log file",
                    "inputs": [
                        {"name": "status", "type": "string", "description": "Notification status: [default, highlight, header, warning, error]"},
                        {"name": "message", "type": "string", "description": "Content of the notification"}
                    ],
                    "return": {"type": "int", "description": "0 if ok, or 1 if an error occured"} 
                },
                {
                    "name": "progress(percentage)",
                    "description": "Append a progress in the log file",
                    "inputs": [
                        {"name": "percentage", "type": "int", "description": "Progress percentage in [0, 100]"}
                    ],
                    "return": {"type": "int", "description": "0 if ok, or 1 if an error occured"} 
                }
            ],
            "setters": [
                {
                    "name": "set_file(filename)",
                    "description": "Set the path of the txt log file",
                    "inputs": [
                        {"name": "filename", "type": "string", "description": "Path of the log file"}
                    ],
                    "return": {"type": "int", "description": "0 if ok, or 1 if an error occured"} 
                }
            ],
            "getters":[
                {
                    "method": "get_file()",
                    "description": "Get the path of the txt log file",
                    "return": {"type": "string", "description": "Path of the log file"} 
                } 
            ]
        },
        {
            "name": "SContainer",
            "extends": "SObject",
            "description": "Abstract class for an information container. Information here is used as a generic word for any kind of data like user information, metadata...",
            "methods":[
                {
                    "method": "is_up_to_date()",
                    "description": "True if the container is up to date with the database, False otherwise",
                    "return": {"type": "bool", "description": "True if the container is up to date with the database, False otherwise"}
                }
            ],
            "getters": [
                {
                    "method": "get_parent()",
                    "description": "Get the parent data container",
                    "return": {"type": "SContainer", "description": "Reference to the parent container. Null reference if no parent"} 
                } 
            ],
            "setters":[
                {
                    "method": "set_up_to_date(value)",
                    "description": "Force the up to date to True. You should not use this method, it is for Request internal use",
                    "inputs":[ {"name": "value", "type": "bool", "description": "True if up to date, false otherwise"}]
                },
                {
                    "method": "set_parent(parent)",
                    "description": "Set the parent data container",
                    "inputs":[ {"name": "parent", "type": "SContainer", "description": "Reference to the parent container. Null reference if no parent"}],
                    "return": {"type": "int", "description": "0 if ok, or 1 if an error occured"} 
                } 
            ]
        },
        {
            "name": "SUser",
            "extends": "SContainer",
            "description": "Container for user information",
            "getters":[
                {   
                    "method": "get_username()", 
                    "description": "Get the username (or login)",
                    "return": {"type": "string", "description": "The username (or login)"}
                },
                {   
                    "method": "get_email()", 
                    "description": "Get the user email address",
                    "return": {"type": "string", "description": "The user email address"}
                },
                {   
                    "method": "get_name()", 
                    "description": "Get the user name (familly name)",
                    "return": {"type": "string", "description": "The user name (familly name)"}
                },
                {   
                    "method": "get_firstname()", 
                    "description": "Get the user firstname",
                    "return": {"type": "string", "description": "The user firstname"}
                }
            ],
            "setters":[
                {   
                    "method": "set_username(username)", 
                    "description": "Set the username (or login)",
                    "inputs": [{"name": "username", "type": "string", "description": "The username (or login)"}]
                },
                {   
                    "method": "set_email(email)", 
                    "description": "Set the user email address",
                    "inputs": {"name": "email", "type": "string", "description": "The user email address"},
                    "throws": "SxException if the string is not formated like an email"
                },
                {   
                    "method": "set_name(name)", 
                    "description": "Set the user name (familly name)",
                    "inputs": [{"name": "name", "type": "string", "description": "The user name (familly name)"}]
                },
                {   
                    "method": "set_firstname(firstname)", 
                    "description": "Get the user firstname",
                    "inputs": [{"name": "firstname","type": "string", "description": "The user firstname"}]
                }
            ]
        },
        {
            "name": "SFormat",
            "extends": "SContainer",
            "description": "Container for the descriptions of a data format",
            "getters":[
                {   
                    "method": "get_name()", 
                    "description": "Get the name of the format",
                    "return": {"type": "string", "description": "name of the format"}
                }
            ],
            "setters":[
                {   
                    "method": "set_name(name)", 
                    "description": "Set the name of the format",
                    "inputs":[ {"name": "name", "type": "string", "description": "Name of the format"} ], 
                    "return": {"type": "bool", "description": "0 if ok, or 1 if an error occured"}
                }
            ]
        },
        {
            "name": "SDate",
            "extends": "SContainer",
            "description": "Container for a date. It manage only year, month and day. Not minutes and hours",
            "getters":[
                {
                    "method": "get_to_string(format)", 
                    "description": "Get the the date as a string",
                    "inputs":[ {"name": "format", "type": "string", "description": "Format of the date. Possible values are 'YYYY-MM-DD' or 'DD/MM/YYYY'"}],
                    "return": {"type": "string", "description": "Date representation as a string"}
                },
                {
                    "method": "get_year()",
                    "description": "Get the the date year",
                    "return": {"type": "int", "description": "Year value. Ex 2021."}
                },
                {
                    "method": "get_month()",
                    "description": "Get the the date month",
                    "return": {"type": "int", "description": "Month value. Ex 9."}
                },
                {
                    "method": "get_day()",
                    "description": "Get the the date day",
                    "return": {"type": "int", "description": "Day value. Ex 2."}
                }
            ],
            "setters":[
                {
                    "method": "set_year(value)",
                    "description": "Set the date year",
                    "inputs": [{"name": "value", "type": "int", "descirption": "Year of the date"}]
                },
                {
                    "method": "set_month(value)",
                    "description": "Set the date month",
                    "inputs": [{"name": "value", "type": "int", "descirption": "Month of the date"}]
                },
                {
                    "method": "set_day(value)",
                    "description": "Set the date day",
                    "inputs": [{"name": "value", "type": "int", "descirption": "Day of the date"}]
                },
                {
                    "method": "set_from_string(value)",
                    "description": "Set the date by parsing a string. Possible formats are 'YYYY-MM-DD' or 'DD/MM/YYYY'",
                    "inputs": [{"name": "value", "type": "string", "descirption": "Date as a string"}],
                    "throws": "SxException if the format is not correct"
                }
            ]
        },
        {
            "name": "STags",
            "extends": "SContainer",
            "description": "Container for a map of tags associated to a RawData. Tags are represented as key=value",
            "getters":[
                {   
                    "method": "get_tag(key)", 
                    "description": "Get the value of a tag from it key",
                    "inputs":[ {"name": "key", "type": "string", "description": "Key of the tag"}],
                    "return": {"type": "string", "description": "value of the tag"}
                },
                {
                    "method": "get_count()",
                    "description": "Get the number of pairs 'key=value' of tags",
                    "return": {"type": "int", "description": "Number of tag in the Tags map"}
                },
                {
                    "method": "get_keys()",
                    "description": "Get the list of keys in the Tags map",
                    "return": {"type": "list<string>", "description": "List of tags keys"}
                }
            ],
            "setters":[
                {
                    "method": "set_tag(key, value)",
                    "description": "Set a tag to the map. If the tag already exists, it is replaced",
                    "inputs": [
                        {"name": "key", "type": "string", "description": "Key of the tag"},
                        {"name": "value", "type": "string", "description": "Value of the tag"}
                    ]
                }
            ]
        },
        {
            "name": "SxMetadata",
            "extends": "SxContainer",
            "description": "Abstract parent class to all metadata containers",
            "methods":[
                {
                    "name": "add_child(container)",
                    "description": "Add a child container",
                    "inputs": [{"name": "container", "type": "SxMetadata", "description": "Reference to the child container"}]
                }
            ],
            "getters":[
                {
                    "name": "get_uri()",
                    "description": "Get the metadata URI",
                    "return": {"type": "SxMetadata", "description": "Reference to the child container, or null reference if not exists"} 
                },
                {
                    "name": "get_child(uri)",
                    "description": "Get a child from it URI",
                    "inputs": [{"name": "uri", "type": "string", "description": "URI of the child metadata"}],
                    "return": {"type": "SxMetadata", "description": "Reference to the child container, or null reference if not exists"} 
                },
                {
                    "name": "get_children_at(index)",
                    "description": "Get a child from it index in the children map",
                    "inputs": [{"name": "index", "type": "int", "description": "Index of the child metadata in the children map"}],
                    "return": {"type": "SxMetadata", "description": "Reference to the child container, or null reference if not exists"} 
                },
                {
                    "name": "get_children_count()",
                    "description": "Get a number of children in the children map",
                    "return": {"type": "int", "description": "Number of children in the children map"} 
                }
            ],
            "setters":[
                {
                    "name": "set_uri(uri)",
                    "description": "Set the metadata URI",
                    "inputs": [{"name": "uri", "type": "string", "description": "URI of the metadata"}]
                }
            ]
        },
        {
            "name": "SData",
            "extends": "SMetadata",
            "description": "Metadata container for any data base information",
            "getters":[
                {
                    "method": "get_type()", 
                    "description": "Get the data type. Possible values are (raw, processed)",
                    "return": {"type": "string", "description": "Type of the data"}
                },
                {
                    "method": "get_name()", 
                    "description": "Get the name of the data",
                    "return": {"type": "string", "description": "Name of the data"}
                },
                {
                    "method": "get_author()", 
                    "description": "Get the data author",    
                    "return": {"type": "string", "description": "Reference to the data author information"}
                },
                {
                    "method": "get_date()", 
                    "description": "Get the creation date of the data",
                    "return": {"type": "SDate", "description": "Creation date of the data"}
                },
                {
                    "method": "get_format()", 
                    "description": "Get the data format",
                    "return": {"type": "SFormat", "description": "Data format"}
                }
            ],
            "setters":[
                {
                    "method": "set_type(type)", 
                    "description": "Set the type of the data. Possible values are (raw, processed)",
                    "inputs": [{"name": "type", "type": "string", "description": "Type of the data"} ],
                    "throws": "SxException if the type is not correct"
                },
                {
                    "method": "set_name(name)", 
                    "description": "Set the name of the data",
                    "inputs": [{"name": "name", "type": "string", "description": "Name of the data"} ]
                },
                {
                    "method": "set_author(user)", 
                    "description": "Set the user of the data author",   
                    "inputs": [{"name": "user", "type": "SxUser", "description": "User reference of the data author"} ]
                },
                {
                    "method": "set_date(date)", 
                    "description": "Set the creation date of the data",
                    "inputs": [{"name": "date", "type": "SDate", "description": "Creation date of the data"} ]
                },
                {
                    "method": "set_format(format)", 
                    "description": "Set the data format",
                    "inputs": [{"name": "format", "type": "SFormat", "description": "Data format"} ]
                }
            ]
        },
        {
            "name": "SRawData",
            "extends": "SData",
            "description": "Metadata container for a raw data",
            "getters":[
                {
                    "method": "get_tags()", 
                    "description": "Get the map of the tag associated to the data",
                    "return": {"type": "STags", "description": "Map of the tags describing to the data"}
                }
            ],
            "setters":[
                {
                    "method": "set_tags(tags)", 
                    "description": "Set the map of the tag associated to the data",
                    "inputs": [{"name": "tags", "type": "STags", "description": "Map of the tags describing to the data"} ]
                }
            ]
        },
        {
            "name": "SProcessedData",
            "extends": "SData",
            "description": "Metadata container for a processed data",
            "setters": [
                {
                    "method": "set_run_uri(uri)", 
                    "description": "Set the URI of the run metadata",
                    "inputs": [{"name": "uri", "type": "string", "description": "URI of the run metadata"} ]
                },
                {
                    "method": "set_run_input(name, input)", 
                    "description": "Set an input of the run. Update it if already exists or append it to the inputs list otherwise",
                    "inputs": [
                        {"name": "name", "type": "string", "description": "Name of the input data"}, 
                        {"name": "input", "type": "SProcessedDataInput", "description": "Container for a run input"} 
                    ]                   
                },
                {
                    "method": "set_run_output(output)", 
                    "description": "Set the run output. Only one ouput possible which is this processed data",
                    "inputs": [
                        {"name": "output", "type": "SProcessedDataOutput", "description": "Container for a run output"} 
                    ]                 
                }
            ],
            "getters": [
                {
                    "name": "get_run_uri()",
                    "description": "Get the URI of the run metadata",
                    "return": {"type": "string", "description": "URI of the run metadata"}    
                },
                {
                    "method": "get_run_output()", 
                    "description": "Get the run output. Only one ouput possible which is this processed data",
                    "return": {"type": "SProcessedDataOutput", "description": "Container of the run output"}                    
                },
                {
                    "method": "get_run_inputs_count()",
                    "description": "Get the number of run inputs",
                    "return": {"type": "int", "description": "Number of run inputs"}    
                },
                {
                    "method": "get_run_inputs(index)",
                    "description": "Get a run inputs",
                    "inputs": [
                        {"name": "index", "type": "int", "description": "Index of the input in the input list"}
                    ],
                    "return": {"type": "SProcessedDataInput", "description": "Container of run input"}    
                }
            ]
        },
        {
            "name": "SDataset",
            "extends": "SMetadata",
            "description": "Metadata container for a dataset",
            "getters": [
                {
                    "method": "get_type()",
                    "description": "Get the dataset type: (raw or processed)",
                    "return": {"type": "string", "description": "Dataset type: (raw or processed)"}
                },
                {
                    "method": "get_name()",
                    "description": "Get the dataset name",
                    "return": {"type": "string", "description": "Name of the dataset"}
                },
                {
                    "method": "get_data_count()",
                    "description": "Get the number of data in the dataset",
                    "return": {"type": "int", "description": "Number of data in the dataset"}
                },
                {
                    "method": "get_data_uri(index)",
                    "description": "Get the URI of one data in the dataset",
                    "inputs": [
                        {"name": "index", "type": "int", "description": "Index of the data in the dataset"}
                    ],
                    "return": {"type": "string", "description": "URI of the data at index"}
                }
            ],
            "setters": [
                {
                    "method": "set_type(type)",
                    "description": "Set the dataset type",
                    "inputs": [
                        {"name": "type", "type": "string", "description": "Type of the dataset: (raw or processed)"}
                    ],
                    "return": {"type": "int", "description": "0 if ok, or 1 if an error occured"} 
                },
                {
                    "method": "set_name(name)",
                    "description": "Set the dataset name",
                    "inputs": [
                        {"name": "name", "type": "string", "description": "Name of the dataset"}
                    ],
                    "return": {"type": "int", "description": "0 if ok, or 1 if an error occured"} 
                },
                {
                    "method": "set_data(uri)",
                    "description": "Set a data in the dataset. Add if not exists",
                    "inputs": [
                        {"name": "uri", "type": "string", "description": "URI of the data"}
                    ],
                    "return": {"type": "int", "description": "0 if ok, or 1 if an error occured"} 
                }
            ]
        },
        {
            "name": "SExperiment",
            "extends": "SMetadata",
            "description": "Metadata container for an Experiment",
            "getters":[
                {
                    "method": "get_name()",
                    "description": "Get the name of the Experiment",
                    "return": {"type": "string", "description": "Name of the Experiment"}
                },
                {
                    "method": "get_author()",
                    "description": "Get the author of the Experiment",
                    "return": {"type": "string", "description": "Username of the Experiment author"}
                },
                {
                    "method": "get_date()",
                    "description": "Get the date of the Experiment",
                    "return": {"type": "SDate", "description": "Date of the Experiment"}
                },
                {
                    "method": "get_raw_dataset()",
                    "description": "Get the URI of the raw dataset",
                    "return": {"type": "string", "description": "URI of the raw dataset"}
                },
                {
                    "method": "get_processed_datasets()",
                    "description": "Get the URI list of the processed dataset",
                    "return": {"type": "list<string>", "description": "URI list of the processed dataset"}
                },
                {
                    "method": "get_processed_datasets_count()",
                    "description": "Get the number of processed dataset",
                    "return": {"type": "int", "description": "Number of processed dataset"}
                },
                {
                    "method": "get_processed_dataset(index)",
                    "description": "Get the URI of the processed dataset at index",
                    "inputs": [
                        {"name": "index", "type": "int", "description": "index of the processed dataset"}
                    ],
                    "return": {"type": "string", "description": "URI of the processed dataset at index"}
                },
                {
                    "method": "get_tags_keys()",
                    "description": "Get the list of tags keys used in the Experiment",
                    "return": {"type": "list<string>", "description": "List of tags keys used in the Experiment"}
                },
                {
                    "method": "get_tags_keys_count()",
                    "description": "Get the number of tag keys in the Experiment",
                    "return": {"type": "int", "description": "Number of tag keys in the Experiment"}
                },
                {
                    "method": "get_tags_key(index)",
                    "description": "Get the tag key at index",
                    "inputs": [
                        {"name": "index", "type": "int", "description": "index of the tag key"}
                    ],
                    "return": {"type": "string", "description": "Tag key at index"}
                }
            ],
            "setters": [
                {
                    "method": "set_name(name)",
                    "description": "Set the name of the Experiment",
                    "inputs": [
                        {"name": "name", "type": "string", "description": "Name of the Experiment"}
                    ],
                    "return": {"type": "int", "description": "0 if ok, or 1 if an error occured"} 
                },
                {
                    "method": "set_author(username)",
                    "description": "Set the author of the Experiment",
                    "inputs": [
                        {"name": "username", "type": "string", "description": "Username of the Experiment author"}
                    ],
                    "return": {"type": "int", "description": "0 if ok, or 1 if an error occured"}
                },
                {
                    "method": "set_date(date)",
                    "description": "Set the date of the Experiment",
                    "inputs": [
                        {"name": "date", "type": "SDate", "description": "Date of the Experiment"}
                    ],
                    "return": {"type": "int", "description": "0 if ok, or 1 if an error occured"}
                },
                {
                    "method": "set_raw_dataset(uri)",
                    "description": "Set the URI of the raw dataset",
                    "inputs": [
                        {"name": "uri", "type": "string", "description": "URI of the raw dataset"}
                    ],
                    "return": {"type": "int", "description": "0 if ok, or 1 if an error occured"}
                },
                {
                    "method": "set_processed_dataset(uri)",
                    "description": "Set the URI of a processed dataset",
                    "inputs": [
                        {"name": "uri", "type": "string", "description": "URI of the processed dataset"}
                    ],
                    "return": {"type": "int", "description": "0 if ok, or 1 if an error occured"}
                },
                {
                    "method": "set_tag_key(key)",
                    "description": "Set a tag key",
                    "inputs": [
                        {"name": "key", "type": "string", "description": "Tag key"}
                    ],
                    "return": {"type": "int", "description": "0 if ok, or 1 if an error occured"}
                }
            ]
        },
        {
            "name": "SProcessedDataInput",
            "extends": "SContainer",
            "description": "Container for run input information",
            "getters":[
                {
                    "method": "get_name()",
                    "description": "Get the input name",
                    "return": {"type": "string", "description": "Name of the process input"}
                },
                {
                    "method": "get_uri()",
                    "description": "Get the input data URI",
                    "return": {"type": "string", "description": "URI of the input data"}

                },
                {
                    "method": "get_type()",
                    "description": "Get the input data type (raw or processed)",
                    "return": {"type": "string", "description": "Type of the data (raw or processed)"}
                }
            ],
            "setters":[
                {
                    "method": "set_name(name)",
                    "description": "Set the input name",
                    "inputs": [
                        {"name": "name", "type": "string", "description": "Name of the process input"}
                    ]                  
                },
                {
                    "method": "set_uri(uri)",
                    "description": "Set the input data URI",
                    "inputs": [
                        {"name": "uri", "type": "string", "description": "URI of the input data"}
                    ]  
                },
                {
                    "method": "set_type(type)",
                    "description": "Set the input data type (raw or processed)",
                    "inputs": [
                        {"name": "type", "type": "string", "description": "Type of the data (raw or processed)"}
                    ]                    
                }
            ]
        },
        {
            "name": "SProcessedDataOutput",
            "extends": "SContainer",
            "description": "Container for run output information",
            "getters":[
                {
                    "method": "get_name()",
                    "description": "Get the output name",
                    "return": {"type": "string", "description": "Name of the process output"}
                },
                {
                    "method": "get_label()",
                    "description": "Get the output label",
                    "return": {"type": "string", "description": "Label of the process output"}
                }
            ],
            "setters":[
                {
                    "method": "set_name(name)",
                    "description": "Set the output name",
                    "inputs": [
                        {"name": "name", "type": "string", "description": "Name of the process output"}
                    ],
                    "return": {"type": "int", "description": "0 if ok, or 1 if an error occured"}                    
                },
                {
                    "method": "set_label(label)",
                    "description": "Set the output label",
                    "inputs": [
                        {"name": "label", "type": "string", "description": "Label of the process output"}
                    ],
                    "return": {"type": "int", "description": "0 if ok, or 1 if an error occured"}  
                }
            ]
        },
        {
            "name": "SRun",
            "extends": "SMetadata",
            "description": "Metadata container for a process run (or job)",
            "getters":[
                {
                    "name": "get_processed_dataset()",
                    "description": "Get the URI of the processed dataset where the run stored the results",
                    "return": {"type": "string", "description": "URI of the processed dataset"}  
                },
                {
                    "name": "get_process_name()",
                    "description": "Get the name of the process that is runned",
                    "return": {"type": "string", "description": "Name of the process"}  
                },
                {
                    "name": "get_process_uri()",
                    "description": "Get the URI of the process that is runned",
                    "return": {"type": "string", "description": "URI of the process"}  
                },
                {
                    "name": "get_inputs_count()",
                    "description": "Get the number of input data used by the process",
                    "return": {"type": "int", "description": "Number of input data used by the process"} 
                },
                {
                    "name": "get_input(index)",
                    "description": "Get the input at the index",
                    "inputs": [
                        {"name": "index", "type": "int", "description": "Index of the input in the input list"}
                    ],
                    "return": {"type": "SRunInput", "description": "Reference to the run input container"}  
                },
                {
                    "name": "get_inputs()",
                    "description": "Get the list of all inputs used by the process",
                    "return": {"type": "list<SRunInput>", "description": "List of references to the run input containers"} 
                },
                {
                    "name": "get_parameters_count()",
                    "description": "Get the number of parameters used to tune the process",
                    "return": {"type": "int", "description": "Number of parameters"} 
                },
                {
                    "name": "get_parameter(index)",
                    "description": "Get the parameter at the index",
                    "inputs": [
                        {"name": "index", "type": "int", "description": "Index of the parameter in the output list"}
                    ],
                    "return": {"type": "SRunParameter", "description": "Reference to the parameter container"}  
                },
                {
                    "name": "get_parameters()",
                    "description": "Get the list of all parameters used by the process",
                    "return": {"type": "list<SRunParameter>", "description": "List of references to the parameter containers"} 
                }
            ],
            "setters":[
                {
                    "name": "set_processed_dataset(uri)",
                    "description": "Set the URI of the processed dataset where the run stored the results",
                    "inputs": [
                        {"name": "uri", "type": "string", "description": "URI of the processed dataset"}
                    ] 
                },
                {
                    "name": "set_process_name(name)",
                    "description": "Set the name of the process that is runned",
                    "inputs": [
                        {"name": "name", "type": "string", "description": "Name of the process"}
                    ]
                },
                {
                    "name": "set_process_uri(uri)",
                    "description": "Set the URI of the process that is runned",
                    "inputs": [
                        {"name": "uri", "type": "string", "description": "URI of the process"}
                    ]
                },
                {
                    "name": "set_input(input)",
                    "description": "Set the input at the index",
                    "inputs": [
                        {"name": "input", "type": "SRunInput", "description": "Reference to the run input container"}
                    ]
                },
                {
                    "name": "set_parameter(parameter)",
                    "description": "Set the parameter at the index",
                    "inputs": [
                        {"name": "parameter", "type": "SRunParameter", "description": "Reference to the run parameter container"}
                    ]
                }
            ]
        },
        {
            "name": "SRunInput",
            "extends": "SContainer",
            "description": "Container for a run input",
            "getters":[
                {
                    "name": "get_name()",
                    "description": "Get the name of the input",
                    "return": {"type": "string", "description": "Name of the input"}
                },
                {
                    "name": "get_dataset()",
                    "description": "Get the dataset where the input data is stored",
                    "return": {"type": "string", "description": "Get the dataset of input data"}
                },
                {
                    "name": "get_query()",
                    "description": "Get the query used to select data in the input dataset. The query is a RegExp",
                    "return": {"type": "string", "description": "Query used to select input data"}
                },
                {
                    "name": "get_origin_output_name()",
                    "description": "Get the origin output name. It is the name of the output of the previous job in the pipeline",
                    "return": {"type": "string", "description": "Output name of the run that created the input data"}
                }
            ],
            "setters":[
                {
                    "name": "set_name(name)",
                    "description": "Set the name of the input",
                    "inputs": [
                        {"name": "name", "type": "string", "description": "Name of the input"}
                    ]
                },
                {
                    "name": "set_dataset(uri)",
                    "description": "Set the dataset where the input data is stored",
                    "inputs": [
                        {"name": "uri", "type": "string", "description": "URI of input dataset"}
                    ]
                },
                {
                    "name": "set_query(query)",
                    "description": "Set the query used to select data in the input dataset. The query is a RegExp",
                    "inputs": [
                        {"name": "query", "type": "string", "description": "Query used to select input data"}
                    ]
                },
                {
                    "name": "set_origin_output_name(name)",
                    "description": "Set the origin output name. It is the name of the output of the previous job in the pipeline",
                    "inputs": [
                        {"name": "name", "type": "string", "description": "Name of the origin output"}
                    ],
                }    
            ]
        }, 
        {
            "name": "SRunParameter",
            "extents": "SContainer",
            "description": "Container for a run parameter",
            "getters":[
                {
                    "name": "get_name()",
                    "description": "Get the name of the parameter",
                    "return": {"type": "string", "description": "Name of the parameter"}
                },
                {
                    "name": "get_value()",
                    "description": "Get the value of the parameter",
                    "return": {"type": "string", "description": "Value of the parameter"}    
                }
            ],
            "setters":[
                {
                    "name": "set_name(name)",
                    "description": "Set the name of the parameter",
                    "inputs": [
                        {"name": "name", "type": "string", "description": "Name of the parameter"}
                    ]
                },
                {
                    "name": "set_value(value)",
                    "description": "Set the value of the parameter",
                    "inputs": [
                        {"name": "value", "type": "string", "description": "Value of the parameter"}
                    ]
                }
            ]
        },
        {
            "name": "SProcess",
            "extends": "SMetadata",
            "description": "TODO later"
        },
        {
            "name": "SService",
            "extends": "SObject",
            "description": "TODO later: observable and service design patern"
        },
        {
            "name": "SSerialize",
            "extends": "SService",
            "description": "TODO later: serialization service with plugins for json (and xml, and yaml)"
        },
        {
            "name": "SRequest",
            "extends": "SService",
            "description": "TODO later: request service for queries"
        }
    ]
}